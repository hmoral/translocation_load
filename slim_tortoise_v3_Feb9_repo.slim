initialize() {

// define directory for output, this directory will be created but not replaced (i.e. mkdir -p)	
	if (exists("DIR_in")==0){
		defineConstant("DIR","~/Desktop/slim_out");
	}
	else{
		defineConstant("DIR",DIR_in);
	}
	
// define length of chromosome	
	if (exists("chrL_in")==0){
		defineConstant("chrL",1e6);
	}
	else{
		defineConstant("chrL",chrL_in);
	}

// define number of populations, this can be changed but	distrMeta "var" has to be changed accordingly 
	defineConstant("nMetaPop",4);

// define Ne of donor populations.
// fix =  fixed size for all populations
// var = custom variable distribution, can be changed below
	if (exists("distrMeta_in")==0){
		defineConstant("distrMeta","fix");
	}
	else{
		defineConstant("distrMeta",distrMeta_in);
	}
	
	if(distrMeta=="fix"){
		defineConstant("N_metaPop",rep(500,nMetaPop));
	}
	
	if(distrMeta=="var"){
		defineConstant("N_metaPop",c(50, 100, 500, 1000));
	} 
	
// define Ne of admixed population	
	defineConstant("N_trans",250);


// define translocation regime
// 1: random
// 2: diversity
// 3: load
// 4: load+diversity
	
	if (exists("trans_mode_in")==0){
		defineConstant("trans_mode",4);
	}
	else{
		defineConstant("trans_mode",trans_mode_in);
	}
	
// define translocation rate
	if (exists("m_in")==0){
		defineConstant("m",0.1);
	}
	else{
		defineConstant("m",m_in);
	}


// define distribution of selection coefficients for deleterious mutations
// fix: fixed s at -0.01
// unif: uniform distribution between -0.01 and -0.5	
	if (exists("s_distr_in")==0){
		defineConstant("s_distr","unif");
	}
	else{
		defineConstant("s_distr",s_distr_in);
	}
	
// this line creates a new vector with a prefix for output name that includes the variables choosen
defineConstant("prefix","chr"+chrL+"_K"+nMetaPop+"_"+distrMeta+"Tdist"+"_Tmode"+trans_mode+"_"+s_distr+"Sdist"+"_"+ "mig"+m);

// the model starts here	
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(keepPedigrees=T);
	initializeMutationRate(1e-7);
	initializeMutationType("m1", 0.5, "f", 0.0);         // non-coding

// alternative distributions of deleterious selection coefficients	
	if(s_distr=="fix"){initializeMutationType("m2", 0.01, "f", -0.01);}
	
	if(s_distr=="unif"){
		del_unif = "runif(1,-0.5,-0.001);";
		initializeMutationType("m2", 0.01, "s", del_unif);
	}

// neutral mutations are converted to subtituions, deleterious mutations are not	
	m1.convertToSubstitution=T;
	m2.convertToSubstitution=F;

	initializeGenomicElementType("g1", c(m1,m2), c(0.8,0.2));
	initializeGenomicElement(g1, 0, chrL);
	initializeRecombinationRate(1e-8);

	system("mkdir -p "+ DIR);
	defineConstant("seed",getSeed());
}

// first generation the populations are created and output files generated
1 {
	for (i in 1:nMetaPop){
		pop="p"+i;
		Ne=N_metaPop[i-1];
		sim.addSubpop(pop, Ne);
		sim.subpopulations[i-1].tag=Ne;
	}
	
	// admixed population metrics
	out="gen" + "\t" + "pop" + "\t" + "ID"+ "\t" + "fit" + "\t" + "pi" + "\t" + "indvLoad"+ "\t" + "indvLoadHom"+ "\t" + "indvLoadHet"+ "\t" + "mCount"+ "\t" + "meanFreq"+ "\t" + "time";
	writeFile((DIR+"/slim_out_metrics_"+seed+"_"+prefix+".txt"),out,append=F);

	// translocated individuals metrics	
	out="gen" + "\t" + "id" + "\t" + "pop"+ "\t" + "pedGrndP" + "\t" + "pedParents" + "\t" + "pedIndv";
	writeFile((DIR+"/slim_out_translocation_"+seed+"_"+prefix+".txt"),out,append=F);


}


// random migration
early() {
	if(sim.generation<4999 & m > 0.0){
		// random migration
		nIndividuals = sum(sim.subpopulations.individualCount);
		nMigrants = rpois(1, nIndividuals * m);
		migrants = sample(sim.subpopulations.individuals, nMigrants);
		
		for (migrant in migrants)
		{
			do dest = sample(sim.subpopulations, 1);
			while (dest == migrant.subpopulation);
			
			dest.takeMigrants(migrant);
		}
	}
}


// reproduction call to make a nonWF a WF model accrding to recepie 16.5 (random mating)
reproduction() {
	for (pop in sim.subpopulations){
		K=pop.tag;
		for (i in seqLen(K))
		{
			firstParent = pop.sampleIndividuals(1);
			secondParent = pop.sampleIndividuals(1);
			pop.addCrossed(firstParent, secondParent);
		}
	}
	self.active = 0;
}

// fitness scalling  to make a nonWF a WF model accrding to recepie 16.5 (discrete generations)
early()
{
	inds = sim.subpopulations.individuals;
	inds[inds.age > 0].fitnessScaling = 0.0;
}

// translocation event
4999 late() {
	pop=length(sim.subpopulations)+1;
	pop="p"+pop;
	sim.addSubpop(pop, 0);

// random
	if(trans_mode==1){
		migrants=c();
		for (pop in 1:nMetaPop){
// sample all individuals of age 0 as this is a WF model	
	migrants=c(migrants,sim.subpopulations[pop-1].individuals[sim.subpopulations[pop-1].individuals.age==0]);
		}
		migrants=sample(migrants,N_trans,weights=(5-migrants.subpopulation.id));

// print some sanity checks	
		print("/n"+"###########################");
		print("Migrants from pops");
		print(length(migrants));
		print(unique(migrants.subpopulation.id));
		print(length(unique(migrants.pedigreeGrandparentIDs)));
		print(length(unique(migrants.pedigreeParentIDs)));
		print(length(unique(migrants.pedigreeID)));
		print("###########################"+"\n");
				
// collect metrics of individuals to be translocated and output	
		mig_id=migrants.index;
		mig_pop=migrants.subpopulation.id;
		mig_pedGrndP=length(unique(migrants.pedigreeGrandparentIDs));
		mig_pedParents=length(unique(migrants.pedigreeParentIDs));
		mig_pedIndv=length(unique(migrants.pedigreeID));
		out=sim.generation + "\t" + mig_id + "\t" + mig_pop + "\t" + mig_pedGrndP + "\t" + mig_pedParents + "\t" + mig_pedIndv;
		writeFile((DIR+"/slim_out_translocation_"+seed+"_"+prefix+".txt"),out,append=T);
		
// create admixed population with translocated individuals and remove donor populations			
		sim.subpopulations[nMetaPop].takeMigrants(migrants);
		sim.subpopulations[nMetaPop].tag=N_trans;
		sim.subpopulations[0:(nMetaPop-1)].removeSubpopulation();
	}

// diversity
	if(trans_mode==2){
// threshold, top 80% of diversity
		Q=0.8;
// sample all individuals of age 0 as this is a WF model	
		ALL_indv=sim.subpopulations.individuals[sim.subpopulations.individuals.age==0];

// calculate individual load and nucleotide diversity, this code is the same as the load regime	
		ALL_indv_pi=c();
		ALL_indv_load=c();
		for(indv in ALL_indv){
			// Calculate the nucleotide heterozygosity of this individual
			muts0 = indv.genomes[0].mutations;
			muts1 = indv.genomes[1].mutations;
			
			// Count the shared mutations
			shared_count = sum(match(muts0, muts1) >= 0);
			
			// All remaining mutations in the genomes are unshared (i.e. heterozygous)
			unshared_count = muts0.size() + muts1.size() - 2 * shared_count;
			
			// pi is the mean heterozygosity across the chromosome
			pi_ind = unshared_count / (sim.chromosome.lastPosition + 1);
			ALL_indv_pi=c(ALL_indv_pi,pi_ind);
			
			muts0_m2=indv.genomes[0].mutationsOfType(m2);
			muts1_m2=indv.genomes[1].mutationsOfType(m2);
			
			if(length(muts0_m2)+length(muts1_m2)>0){
				HOMO_m2=setIntersection(muts0_m2,muts1_m2);
				HETERO_m2=setSymmetricDifference(muts0_m2,muts1_m2);
				IndvLoadM2_homo=abs(sum(HOMO_m2.selectionCoeff));
				IndvLoadM2_hetero=abs(sum(HETERO_m2.selectionCoeff*m2.dominanceCoeff));
				IndvLoadM2=abs(IndvLoadM2_homo+IndvLoadM2_hetero);
				fit=1-IndvLoadM2;
			} else { IndvLoadM2_homo=0;IndvLoadM2_hetero=0;IndvLoadM2=0;fit=1-IndvLoadM2;}
			ALL_indv_load=c(ALL_indv_load,IndvLoadM2);
		}

// find the top 80% threshold and sample indivudals
// this is the only step that differs from the load regime, so that block is not commented
		ALL_indv_pi_sorted=sort(ALL_indv_pi);
		piTresh=ALL_indv_pi_sorted[round((length(ALL_indv_pi_sorted)-1)*Q + 1)-1];
		migrants=sample(ALL_indv[ALL_indv_pi>=piTresh],N_trans);

// print some sanity checks	
		print("/n"+"###########################");
		print("Migrants from pops");
		print(length(migrants));
		print(unique(migrants.subpopulation.id));
		print(length(unique(migrants.pedigreeGrandparentIDs)));
		print(length(unique(migrants.pedigreeParentIDs)));
		print(length(unique(migrants.pedigreeID)));
		print("###########################"+"\n");
				
// collect metrics of individuals to be translocated and output	
		mig_id=migrants.index;
		mig_pop=migrants.subpopulation.id;
		mig_pedGrndP=length(unique(migrants.pedigreeGrandparentIDs));
		mig_pedParents=length(unique(migrants.pedigreeParentIDs));
		mig_pedIndv=length(unique(migrants.pedigreeID));
		out=sim.generation + "\t" + mig_id + "\t" + mig_pop + "\t" + mig_pedGrndP + "\t" + mig_pedParents + "\t" + mig_pedIndv;
		writeFile((DIR+"/slim_out_translocation_"+seed+"_"+prefix+".txt"),out,append=T);

// create admixed population with translocated individuals and remove donor populations
		sim.subpopulations[nMetaPop].takeMigrants(migrants);
		sim.subpopulations[nMetaPop].tag=N_trans;
		sim.subpopulations[0:(nMetaPop-1)].removeSubpopulation();
	}
	
	if(trans_mode==3){
		Q=0.2;
		ALL_indv=sim.subpopulations.individuals[sim.subpopulations.individuals.age==0];
		ALL_indv_pi=c();
		ALL_indv_load=c();
		for(indv in ALL_indv){
			// Calculate the nucleotide heterozygosity of this individual
			muts0 = indv.genomes[0].mutations;
			muts1 = indv.genomes[1].mutations;
			
			// Count the shared mutations
			shared_count = sum(match(muts0, muts1) >= 0);
			
			// All remaining mutations in the genomes are unshared (i.e. heterozygous)
			unshared_count = muts0.size() + muts1.size() - 2 * shared_count;
			
			// pi is the mean heterozygosity across the chromosome
			pi_ind = unshared_count / (sim.chromosome.lastPosition + 1);
			ALL_indv_pi=c(ALL_indv_pi,pi_ind);
			
			muts0_m2=indv.genomes[0].mutationsOfType(m2);
			muts1_m2=indv.genomes[1].mutationsOfType(m2);
			
			if(length(muts0_m2)+length(muts1_m2)>0){
				HOMO_m2=setIntersection(muts0_m2,muts1_m2);
				HETERO_m2=setSymmetricDifference(muts0_m2,muts1_m2);
				IndvLoadM2_homo=abs(sum(HOMO_m2.selectionCoeff));
				IndvLoadM2_hetero=abs(sum(HETERO_m2.selectionCoeff*m2.dominanceCoeff));
				IndvLoadM2=abs(IndvLoadM2_homo+IndvLoadM2_hetero);
				fit=1-IndvLoadM2;
			} else { IndvLoadM2_homo=0;IndvLoadM2_hetero=0;IndvLoadM2=0;fit=1-IndvLoadM2;}
			ALL_indv_load=c(ALL_indv_load,IndvLoadM2);
		}
		ALL_indv_load_sorted=sort(ALL_indv_load);
		loadTresh=ALL_indv_load_sorted[round((length(ALL_indv_load_sorted)-1)*Q + 1)-1];
		migrants=sample(ALL_indv[ALL_indv_load<=loadTresh],N_trans);
		print("/n"+"###########################");
		print("Migrants from pops");
		print(length(migrants));
		print(unique(migrants.subpopulation.id));
		print(length(unique(migrants.pedigreeGrandparentIDs)));
		print(length(unique(migrants.pedigreeParentIDs)));
		print(length(unique(migrants.pedigreeID)));
		print("###########################"+"\n");

		mig_id=migrants.index;
		mig_pop=migrants.subpopulation.id;
		mig_pedGrndP=length(unique(migrants.pedigreeGrandparentIDs));
		mig_pedParents=length(unique(migrants.pedigreeParentIDs));
		mig_pedIndv=length(unique(migrants.pedigreeID));
		out=sim.generation + "\t" + mig_id + "\t" + mig_pop + "\t" + mig_pedGrndP + "\t" + mig_pedParents + "\t" + mig_pedIndv;
		writeFile((DIR+"/slim_out_translocation_"+seed+"_"+prefix+".txt"),out,append=T);

		sim.subpopulations[nMetaPop].takeMigrants(migrants);
		sim.subpopulations[nMetaPop].tag=N_trans;
		sim.subpopulations[0:(nMetaPop-1)].removeSubpopulation();
	}

	if(trans_mode==4){
		Qload=0.3;
		QUx=0.5;
// calculate individual load and nucleotide diversity, this code is the same as the load regime	
		migrants=c();
		for (pop in 1:nMetaPop){
			ALL_indv=sim.subpopulations[pop-1].individuals[sim.subpopulations[pop-1].individuals.age==0];
			ALL_indv_pi=c();
			ALL_indv_load=c();
			for(indv in ALL_indv){
				// Calculate the nucleotide heterozygosity of this individual
				muts0 = indv.genomes[0].mutations;
				muts1 = indv.genomes[1].mutations;
				
				// Count the shared mutations
				shared_count = sum(match(muts0, muts1) >= 0);
				
				// All remaining mutations in the genomes are unshared (i.e. heterozygous)
				unshared_count = muts0.size() + muts1.size() - 2 * shared_count;
				
				// pi is the mean heterozygosity across the chromosome
				pi_ind = unshared_count / (sim.chromosome.lastPosition + 1);
				ALL_indv_pi=c(ALL_indv_pi,pi_ind);
				
				muts0_m2=indv.genomes[0].mutationsOfType(m2);
				muts1_m2=indv.genomes[1].mutationsOfType(m2);
				
				if(length(muts0_m2)+length(muts1_m2)>0){
					HOMO_m2=setIntersection(muts0_m2,muts1_m2);
					HETERO_m2=setSymmetricDifference(muts0_m2,muts1_m2);
					IndvLoadM2_homo=sum(abs(HOMO_m2.selectionCoeff)*2);
					IndvLoadM2_hetero=sum(abs(HETERO_m2.selectionCoeff)*m2.dominanceCoeff);
					IndvLoadM2=abs(IndvLoadM2_homo+IndvLoadM2_hetero);
					fit=1-IndvLoadM2;
				} else { IndvLoadM2_homo=0;IndvLoadM2_hetero=0;IndvLoadM2=0;fit=1-IndvLoadM2;}
				ALL_indv_load=c(ALL_indv_load,IndvLoadM2);
			}		
// retain indivduals with lower load			
			ALL_indv_load_sorted=sort(ALL_indv_load);
			loadTresh=ALL_indv_load_sorted[round((length(ALL_indv_load_sorted)-1)*Qload + 1)-1];
			migrants_pop=ALL_indv[ALL_indv_load<=loadTresh];

// calculate uniqueness index			
			migrants_Ux=c();
			for(indv in migrants_pop){
				pop=indv.subpopulation.id;
				Ux=sum(1-sim.mutationFrequencies(sim.subpopulations[pop-1],indv.uniqueMutationsOfType(m1)));
				indv.setValue("Ux",Ux);
				migrants_Ux=c(migrants_Ux,Ux);
			}

// retain indivduals with higher uniqueness			
			Ux_sort=sort(migrants_pop.getValue("Ux"),ascending=F);
			Ux_tresh=Ux_sort[round((length(Ux_sort)-1)*QUx + 1)-1];
			migrants_pop=migrants_pop[migrants_pop.getValue("Ux")>=Ux_tresh];
			migrants=c(migrants,migrants_pop);
		}
		Npops=sapply(sim.subpopulations, "mean(applyValue.individualCount);");

// calculate sampling weight so smaller population have more chance to contribute migrants			
		Nweights=1-Npops/sum(Npops);
		for (indv in migrants){
			indv.setValue("Nweight",Nweights[indv.subpopulation.id-1]);
		}
		migrants=sample(migrants,N_trans,weights=migrants.getValue("Nweight"));
		print("/n"+"###########################");
		print("Migrants from pops");
		print(length(migrants));
		print(unique(migrants.subpopulation.id));
		print(length(unique(migrants.pedigreeGrandparentIDs)));
		print(length(unique(migrants.pedigreeParentIDs)));
		print(length(unique(migrants.pedigreeID)));
		print("###########################"+"\n");

		mig_id=migrants.index;
		mig_pop=migrants.subpopulation.id;
		mig_pedGrndP=length(unique(migrants.pedigreeGrandparentIDs));
		mig_pedParents=length(unique(migrants.pedigreeParentIDs));
		mig_pedIndv=length(unique(migrants.pedigreeID));
		out=sim.generation + "\t" + mig_id + "\t" + mig_pop + "\t" + mig_pedGrndP + "\t" + mig_pedParents + "\t" + mig_pedIndv;
		writeFile((DIR+"/slim_out_translocation_"+seed+"_"+prefix+".txt"),out,append=T);
		sim.subpopulations[nMetaPop].takeMigrants(migrants);
		sim.subpopulations[nMetaPop].tag=N_trans;
		sim.subpopulations[0:(nMetaPop-1)].removeSubpopulation();
	}

}

// print out some stats every generation
4990: early() { if(sim.generation % 1 == 0){
		print("gen "+sim.generation);
		print("N = "+sapply(sim.subpopulations, "mean(applyValue.individualCount);"));
		print("m2 count= "+sapply(sim.subpopulations, "mean(applyValue.individuals.countOfMutationsOfType(m2));"));
		print("m2 loci= "+sapply(sim.subpopulations, "length(unique(applyValue.individuals.uniqueMutationsOfType(m2).position));"));
		print("m2 freq= "+sapply(sim.subpopulations, "mean(sim.mutationFrequencies(applyValue,applyValue.individuals.uniqueMutationsOfType(m2)));"));
		print("m2 mig= "+sapply(sim.subpopulations, "length(unique(applyValue.individuals.migrant));"));
	}

}

// output metrics from the point in which individuals to translocate are sampled
4999: late() {
	ALL_indv=sim.subpopulations.individuals;
	for(indv in ALL_indv){
		ID=indv.pedigreeID;
		POP=indv.subpopulation.id;
		mut=indv.uniqueMutationsOfType(m2);
		mutCount=length(mut);
		freq=mean(sim.mutationFrequencies(p5,mut));
		
		// Calculate the nucleotide heterozygosity of this individual
		muts0 = indv.genomes[0].mutations;
		muts1 = indv.genomes[1].mutations;
		
		// Count the shared mutations
		shared_count = sum(match(muts0, muts1) >= 0);
		
		// All remaining mutations in the genomes are unshared (i.e. heterozygous)
		unshared_count = muts0.size() + muts1.size() - 2 * shared_count;
		
		// pi is the mean heterozygosity across the chromosome
		pi_ind = unshared_count / (sim.chromosome.lastPosition + 1);
		
		muts0_m2=indv.genomes[0].mutationsOfType(m2);
		muts1_m2=indv.genomes[1].mutationsOfType(m2);
		
		if(length(muts0_m2)+length(muts1_m2)>0){
			HOMO_m2=setIntersection(muts0_m2,muts1_m2);
			HETERO_m2=setSymmetricDifference(muts0_m2,muts1_m2);
			IndvLoadM2_homo=abs(sum(HOMO_m2.selectionCoeff));
			IndvLoadM2_hetero=abs(sum(HETERO_m2.selectionCoeff*m2.dominanceCoeff));
			IndvLoadM2=abs(IndvLoadM2_homo+IndvLoadM2_hetero);
			fit=1-IndvLoadM2;
		} else { IndvLoadM2_homo=0;IndvLoadM2_hetero=0;IndvLoadM2=0;fit=1-IndvLoadM2;}
		
		out=sim.generation + "\t" + POP + "\t" + ID + "\t" + fit + "\t" + pi_ind + "\t" + IndvLoadM2+ "\t" + IndvLoadM2_homo+ "\t" + IndvLoadM2_hetero + "\t" + mutCount+ "\t" + freq+ "\t" + "late";
		
		writeFile((DIR+"/slim_out_metrics_"+seed+"_"+prefix+".txt"),out,append=T);
	
	}
}

// finsih simulation
5010 { sim.simulationFinished(); }
